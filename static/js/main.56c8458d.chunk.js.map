{"version":3,"sources":["components/FormConvert/FormConvert.jsx","App.jsx","serviceWorker.js","index.js"],"names":["FormConvert","rgbColor","setBackgroundColor","useState","hexColor","setHexColor","convertHexTwoRgbColor","hex","rgbArray","replace","letter","push","parseInt","join","className","onChange","value","target","length","test","style","backgroundColor","App","setRgbColor","isError","setIsError","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qJA+CeA,G,KA3CK,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,mBAAyB,EACtBC,mBAAS,WADa,mBAC/CC,EAD+C,KACrCC,EADqC,KAGhDC,EAAwB,SAAAC,GAC1B,IAAMC,EAAW,GAIjB,OAHAD,EAAIE,QAAQ,mBAAmB,SAAAC,GAC3BF,EAASG,KAAKC,UAAU,KAAD,OAAMF,GAAU,QAErC,OAAN,OAAcF,EAASK,KAAK,MAA5B,MAgBJ,OACI,0BAAMC,UAAU,QACZ,2BACIA,UAAU,cACVC,SAjBS,SAAC,GAA2B,IAAfC,EAAc,EAAxBC,OAAUD,MACT,IAAjBA,EAAME,QAAiC,IAAjBF,EAAME,SACxB,oBAAoBC,KAAKH,GACzBd,EAAmBI,EAAsBU,EAAMP,QAAQ,eAAgB,UAChE,oBAAoBU,KAAKH,GAChCd,EAAmBI,EAAsBU,IAEzCd,EAAmB,0CAG3BG,EAAYW,IAQJA,MAAOZ,IAEX,uBAAGU,UAAU,aAAaM,MAAO,CAAEC,gBAAiBjB,IAAaH,MCT9DqB,EAvBH,WAAO,IAAD,EACgBnB,mBAAS,qBADzB,mBACTF,EADS,KACCsB,EADD,OAEcpB,oBAAS,GAFvB,mBAETqB,EAFS,KAEAC,EAFA,KAahB,OACE,yBAAKX,UAAU,SAASM,MAAO,CAAEC,gBAAiBpB,IAChD,kBAAC,EAAD,CACEA,SAAUuB,EAAU,wCAAYvB,EAChCC,mBAbqB,SAAAE,GACR,0CAAbA,GACFqB,GAAW,GACXF,EAAY,qBAEZA,EAAYnB,QCAEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.56c8458d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './FormConvert.css';\r\n\r\nconst FormConvert = ({ rgbColor, setBackgroundColor }) => {\r\n    const [hexColor, setHexColor] = useState('#9921ff');\r\n\r\n    const convertHexTwoRgbColor = hex => {\r\n        const rgbArray = [];\r\n        hex.replace(/[0-9a-f]{2,2}/gi, letter => {\r\n            rgbArray.push(parseInt(+`0x${letter}`, 10))\r\n        });\r\n        return `rgb(${rgbArray.join(', ')})`;\r\n    };\r\n\r\n    const handleChange = ({ target: { value } }) => {\r\n        if (value.length === 4 || value.length === 7) {\r\n            if (/^#[0-9a-f]{3,3}$/i.test(value)) {\r\n                setBackgroundColor(convertHexTwoRgbColor(value.replace(/([0-9a-f])/gi, '$1$1')));\r\n            } else if (/^#[0-9a-f]{6,6}$/i.test(value)) {\r\n                setBackgroundColor(convertHexTwoRgbColor(value));\r\n            } else {\r\n                setBackgroundColor('Ошибка!');\r\n            }\r\n        }\r\n        setHexColor(value);\r\n    };\r\n\r\n    return (\r\n        <form className=\"form\">\r\n            <input\r\n                className=\"form__input\"\r\n                onChange={handleChange}\r\n                value={hexColor}\r\n            />\r\n            <p className=\"form__text\" style={{ backgroundColor: hexColor }}>{rgbColor}</p>\r\n        </form>\r\n    );\r\n};\r\n\r\nFormConvert.propTypes = {\r\n    props: PropTypes.shape({\r\n        rgbColor: PropTypes.string.isRequired,\r\n        convertHexTwoRgbColor: PropTypes.func.isRequired\r\n    })\r\n};\r\n\r\nexport default FormConvert;\r\n\r\n","import React, { useState } from 'react';\nimport FormConvert from './components/FormConvert/FormConvert';\n\nconst App = () => {\n  const [rgbColor, setRgbColor] = useState('rgb(153, 33, 255)');\n  const [isError, setIsError] = useState(false);\n\n  const setBackgroundColor = hexColor => {\n    if (hexColor === 'Ошибка!') {\n      setIsError(true);\n      setRgbColor('rgb(233, 75, 53)');\n    } else {\n      setRgbColor(hexColor);\n    }\n  };\n\n  return (\n    <div className=\"window\" style={{ backgroundColor: rgbColor }}>\n      <FormConvert\n        rgbColor={isError ? 'Ошибка!' : rgbColor}\n        setBackgroundColor={setBackgroundColor}\n      />\n    </div>\n  );\n};\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}